#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
"""Wrapper for the Wetter module which performs the actual algorithm.

Example
-------
Usage::

    $ ./mizzler structure.pdb

Example config file::

    atom Ti: surface
        water: 1.0
        hydroxyl: 0.0
    atom Ti: defect
        water: 0.5
        hydroxyl: 0.5
    resname SOL
    end

"""
from radish import Topologizer
import sys
import argcomplete
import argparse
from timeit import default_timer as timer
import numpy as np
import os
from IPython import embed

# mizzle imports
from mizzle.WetParser import parse_config, parse_data
from mizzle.pdbExplorer import remove_low_coordinated,append_atoms
from mizzle.Wetter import Wetter
import mizzle.WetParser as wp

class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter):
    pass

def main(argv=None):

    if argv is None:
        argv = sys.argv

    argparser = argparse.ArgumentParser(description=__doc__,
                                       formatter_class=CustomFormatter)
    
    # Options
    argparser.add_argument("coords", metavar="file.pdb", default="input.pdb",
                           help="Input: Structure file in pdb format")
    argparser.add_argument("-c", "--conf",
                           default=os.path.join(\
                           os.path.dirname(wp.__file__), "config.wet"),
                           help="Input: Config file")
    argparser.add_argument("-o", "--out", default=None,
                           help="Output: Hydrated structure,\
                                 default: filename_wet.pdb")
    argparser.add_argument("-s", "--silent", action="store_true",
                           help="Param: Silence is golden")
    argparser.add_argument("-log", "--log", action="store_true",
                           help="Write log file for optimization")
    argparser.add_argument('--check', default='all', nargs='?',
                    choices=['none', 'metal', 'all'],
                    help='')
    argparser.add_argument('-solver', default='L-BFGS-B', nargs='?',
                    choices=['L-BFGS-B', 'SLSQP'],
                    help='Minimization method')
    argparser.add_argument('-maxiter', default='500',
                    help='Maximum steps when minimizing potential')
    # Parse arguments
    argcomplete.autocomplete(argparser)
    args = argparser.parse_args()
    
    ## PREPARE INPUT ##
    path = os.path.split(args.coords)[0]
    if(args.out):
        fileWet = args.out
    else:
        root,ext = os.path.splitext(args.coords)
        fileWet = "{}{}{}".format(root, "_wet", ext)

    # Call WetParser to parse config file
    atoms, resname = parse_config(args.conf)

    if (not resname):
        resname = "SOL"
    # Get element from config.wet
    element = atoms[0].get("element", None)
    waterFrac = None
    hydroxylFrac = None
    fraction = None

    print("______________________________________________________________________")
    print("Running Wetter with Config:")
    print("----------------------------------------------------------------------")
    print("Atom     Type    OH-frac     OH2-frac    "+\
          "Nmax   d_MOH   d_MOH2    <MOH")
    for atom in atoms:
        element = atom.get("element")
        metalData = parse_data(element)
        Nmax = metalData['Nmax']
        d_MOH = metalData['d_MOH']
        d_MOH2 = metalData['d_MOH2']
        angle = metalData['<MOH']
        coordination = atom.get("coordination", None)
        if coordination == "surface":
            hydroxylFrac = float(atom.get("hydroxyl", None))
            waterFrac = float(atom.get("water", None))
            print (" " + atom.get('element') + "\t" + \
                   str(atom.get('coordination')) + "\t   " +\
                   str(hydroxylFrac) + "\t       " + str(waterFrac) +\
                   "\t   " + str(Nmax)+ "\t " + str(d_MOH) +\
                   "      " + str(d_MOH2) + "\t "+str(angle))
        elif coordination == "defect":
            dHydroxylFrac = float(atom.get('hydroxyl', None))
            dWaterFrac = float(atom.get('water', None))
            print (" " + atom.get('element') + "\t" + \
                   str(atom.get('coordination')) + "\t   " + \
                   str(dHydroxylFrac) + "\t       " + str(dWaterFrac) + \
                   "\t   " + str(Nmax)+ "\t " + str(d_MOH) +\
                   "      " + str(d_MOH2) + "\t "+str(angle))
        else:
            raise ValueError("Unknown keyword {}".format(coordination))

    print("Solvate residues will be named: " + resname)
    print("______________________________________________________________________")
    ### RUN ALGORITHM ###

    # Create Wetter object
    wet = Wetter(args.coords, silent = args.silent, optLog = args.log,\
                 solver = args.solver.upper(), maxiter = int(args.maxiter))
    wet.remove_low_coordinated(Nmax, element, check=args.check)

    # Specify which types of atoms that should be hydrated
    wet.solvate({"Nmax": Nmax, "element": element, "coordination": Nmax - 1,\
                 "OH": hydroxylFrac, "OH2": waterFrac, "O": 0.05,\
                 "dMOH": d_MOH, "dMOH2":d_MOH2, "<MOH":angle})

    wet.solvate({"Nmax": Nmax, "element": element, "coordination": Nmax - 2,\
                 "OH": dHydroxylFrac, "OH2": dWaterFrac, "O": 0.1,\
                 "dMOH": d_MOH, "dMOH2":d_MOH2, "<MOH":angle})

    # Run minimization
    wet.optimize()

    #Create atoms and append to file
    wet.wet()
    wet.save(fileWet, resname)

if __name__ == "__main__":
    sys.exit(main())